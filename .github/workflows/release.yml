name: Build and Release

on:
  workflow_dispatch: # allow manual trigger
  push:
    branches:
      - main
#    tags:
#      - 'v*' # only do this on tags that start with 'v'

jobs:
  build:
    runs-on: [self-hosted, Linux]
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

#      # 2. Set up .NET
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v3
#        with:
#          dotnet-version: '8.0.x'

#      - name: Set up .NET Core
#        run: echo "DOTNET_ROOT=$HOME/.dotnet" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Setup PATH for .NET
#        run: echo "$HOME/.dotnet/tools" >> $GITHUB_ENV
#        shell: bash

      # 3. Create a new tag (if not exists)
      - name: Create Tag
        id: tag
        run: |
          git fetch --tags
          TAG="v$(date +'%Y%m%d-%H%M%S')"
          git tag $TAG
          git push origin $TAG
          echo "tag=$TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. Build self-contained binaries for each OS
      - name: Build for Linux
        run: dotnet publish -c Release -r linux-x64 --self-contained --p:PublishTrimmed=true --p:PublishSingleFile=true -o ./output/linux/linux-x64/

      - name: Build for Windows
        run: dotnet publish -c Release -r win-x64 --self-contained --p:PublishTrimmed=true --p:PublishSingleFile=true -o ./output/windows/win-x64/

      - name: Build for macOS (Apple Silicon)
        run: dotnet publish -c Release -r osx-arm64 --self-contained --p:PublishTrimmed=true --p:PublishSingleFile=true -o ./output/macos/osx-arm64/

      - name: Build for macOS (Intel)
        run: dotnet publish -c Release -r osx-x64 --self-contained --p:PublishTrimmed=true --p:PublishSingleFile=true -o ./output/macos/osx-x64/

      # 5. Verify variables
      - name: Verify variables
        run: |
          echo "Repository: '${{ env.GITHUB_REPOSITORY }}'"
          echo "Repo Name: '${{ env.REPO_NAME }}'"
          echo "Owner: '${{ env.GITHUB_OWNER }}'"
          echo "Tag: '${{ env.tag }}'"

      # 6. Zip output for each OS
      - name: Zip output (linux-x64)
        run: |
          OS=linux
          ARCH=linux-x64
          
          ZIP_FILE=${{ env.REPO_NAME }}_$ARCH.zip
          WORK_DIR=${{ env.REPO_NAME }}/$OS/$ARCH/
          echo "WORK_DIR: $WORK_DIR"
          mkdir -p $WORK_DIR
          mv ./output/$OS/$ARCH/* $WORK_DIR
          ls -la $WORK_DIR
          zip -r $ZIP_FILE ${{WORK_DIR}}${{env.REPO_NAME}}/$OS/$ARCH/
          SHA256=$(shasum -a 256 $ZIP_FILE | awk '{ print $1 }')
          echo "$ZIP_FILE.SHA256: $SHA256"
          echo $SHA256 > $ZIP_FILE.SHA256

      - name: Zip output (Windows)
        run: |
          OS=windows
          ARCH=win-x64
          
          ZIP_FILE=${{ env.REPO_NAME }}_$ARCH.zip
          WORK_DIR=${{ env.REPO_NAME }}/$OS/$ARCH/
          echo "WORK_DIR: $WORK_DIR"
          mkdir -p $WORK_DIR
          mv ./output/$OS/$ARCH/* $WORK_DIR
          ls -la $WORK_DIR
          zip -r $ZIP_FILE ${{WORK_DIR}}${{env.REPO_NAME}}/$OS/$ARCH/
          SHA256=$(shasum -a 256 $ZIP_FILE | awk '{ print $1 }')
          echo "$ZIP_FILE.SHA256: $SHA256"
          echo $SHA256 > $ZIP_FILE.SHA256

      - name: Zip output (macOS Silicon)
        run: |
          OS=macos
          ARCH=osx-arm64
          
          ZIP_FILE=${{ env.REPO_NAME }}_$ARCH.zip
          WORK_DIR=${{ env.REPO_NAME }}/$OS/$ARCH/
          echo "WORK_DIR: $WORK_DIR"
          mkdir -p $WORK_DIR
          mv ./output/$OS/$ARCH/* $WORK_DIR
          ls -la $WORK_DIR
          zip -r $ZIP_FILE ${{WORK_DIR}}${{env.REPO_NAME}}/$OS/$ARCH/
          SHA256=$(shasum -a 256 $ZIP_FILE | awk '{ print $1 }')
          echo "$ZIP_FILE.SHA256: $SHA256"
          echo $SHA256 > $ZIP_FILE.SHA256

      - name: Zip output (macOS Intel)
        run: |  
          OS=macos
          ARCH=osx-x64
          
          ZIP_FILE=${{ env.REPO_NAME }}_$ARCH.zip
          WORK_DIR=${{ env.REPO_NAME }}/$OS/$ARCH/
          echo "WORK_DIR: $WORK_DIR"
          mkdir -p $WORK_DIR
          mv ./output/$OS/$ARCH/* $WORK_DIR
          ls -la $WORK_DIR
          zip -r $ZIP_FILE ${{WORK_DIR}}${{env.REPO_NAME}}/$OS/$ARCH/
          SHA256=$(shasum -a 256 $ZIP_FILE | awk '{ print $1 }')
          echo "$ZIP_FILE.SHA256: $SHA256"
          echo $SHA256 > $ZIP_FILE.SHA256

      # 7. Upload ZIP files to Release
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.REPO_NAME }}_linux-x64.zip
            ${{ env.REPO_NAME }}_win-x64.zip
            ${{ env.REPO_NAME }}_osx-arm64.zip
            ${{ env.REPO_NAME }}_osx-x64.zip
            ${{ env.REPO_NAME }}_linux-x64.zip.SHA256
            ${{ env.REPO_NAME }}_win-x64.zip.SHA256
            ${{ env.REPO_NAME }}_osx-arm64.zip.SHA256
            ${{ env.REPO_NAME }}_osx-x64.zip.SHA256

          tag_name: ${{ env.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}